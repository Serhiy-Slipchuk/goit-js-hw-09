{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAASC,SAASC,cAAc,SAEhCC,EAAe,CACnBC,MAAO,EACPC,KAAM,EACNC,OAAQ,GA6CV,SAASC,EAAcC,EAAUJ,GAY/B,OAXgB,IAAIK,SAAQ,CAACC,EAASC,KACxCC,YAAW,KACeC,KAAKC,SAAW,GAEpCJ,EAAQ,uBAAqBF,QAAiBJ,OAE5CO,EAAK,sBAAoBH,QAAeJ,MAAU,GAErDA,EAAM,G,CAnDXJ,EAAOe,iBAAiB,SAIxB,SAAsBC,GACpB,IAAIC,EAAYD,EAAME,OAAOC,KACzBC,EAAaJ,EAAME,OAAOG,OAYhC,SAA4BF,EAAME,GACnB,UAATF,IACFhB,EAAaC,MAAQkB,OAAOD,IAEjB,SAATF,IACFhB,EAAaE,KAAOiB,OAAOD,IAEhB,WAATF,IACFhB,EAAaG,OAASgB,OAAOD,G,CAnB/BE,CAAmBN,EAAWG,E,IANhCpB,EAAOe,iBAAiB,SASxB,SAAsBC,GAEpB,GADAA,EAAMQ,iBACwB,WAA1BR,EAAME,OAAOO,SACf,QAiBJ,UAAyBrB,MAAEA,EAAKC,KAAEA,EAAIC,OAAEA,IACtCM,YAAW,KACT,IAAK,IAAIc,EAAI,EAAGA,GAAKpB,EAAQoB,IAC3BnB,EAAcmB,EAAGtB,GACduB,MAAKjB,GAAWkB,EAAA9B,GAAS+B,OAAOC,QAAQpB,KACxCqB,OAAMpB,GAAUiB,EAAA9B,GAAS+B,OAAOG,QAAQrB,KAC3CP,GAAgBC,C,GAEjBD,E,CAvBH6B,CAAgB9B,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\n\nconst formEl = document.querySelector('.form');\n\nconst incomingData = {\n  delay: 0,\n  step: 0,\n  amount: 0,\n}\n\nformEl.addEventListener('input', handlerInput);\nformEl.addEventListener('click', handlerClick);\n\n\nfunction handlerInput(event) {\n  let inputName = event.target.name;\n  let inputValue = event.target.value;\n  updateIncomingData(inputName, inputValue);\n}\n\nfunction handlerClick(event) {\n  event.preventDefault();\n  if (event.target.nodeName !== 'BUTTON') {\n    return;\n  };\n  displayPromises(incomingData);\n}\n\nfunction updateIncomingData(name, value) {\n  if (name === 'delay') {\n    incomingData.delay = Number(value);\n  };\n  if (name === 'step') {\n    incomingData.step = Number(value);\n  };\n  if (name === 'amount') {\n    incomingData.amount = Number(value);\n  };\n}\n\nfunction displayPromises({ delay, step, amount }) {\n  setTimeout(() => {\n    for (let i = 1; i <= amount; i++) {\n      createPromise(i, delay)\n        .then(resolve => Notiflix.Notify.success(resolve))\n        .catch(reject => Notiflix.Notify.failure(reject));\n      delay = delay + step;\n    };\n  }, delay);\n  \n}\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\nsetTimeout(() => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    } else {\n      reject(`❌ Rejected promise ${position} in ${delay}ms`);\n    }\n  }, delay);\n  });\n\n  return promise;\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$formEl","document","querySelector","$47d4ff9957288465$var$incomingData","delay","step","amount","$47d4ff9957288465$var$createPromise","position","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","inputName","target","name","inputValue","value","Number","$47d4ff9957288465$var$updateIncomingData","preventDefault","nodeName","i","then","$parcel$interopDefault","Notify","success","catch","failure","$47d4ff9957288465$var$displayPromises"],"version":3,"file":"03-promises.c9b3b8e1.js.map"}